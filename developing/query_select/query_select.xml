<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="querying_with_oql"> 
  <title>OQL Select Statement</title> 
  <prolog audience="basic"> 
  </prolog> 
  <conbody> 
	 <section id="section_04B3A6DD7FCB40A7BB26372A707BD19C"> 
		<p>The basic format of a vFabric 
		  <ph
			conref="../../product_short_name.xml#ditacomponent_4CDD0B39CDD54D2AAF1CBC81A1FDBA19/ph_2E41EB9BE730428A970C1C206D14DC09"><?xm-replace_text Phrase?></ph>
		  OQL SELECT statement is 
		</p> 
		<codeblock>SELECT [DISTINCT] projectionList 
FROM collection1, [collection2, ...] 
[WHERE clause]
[ORDER BY order_criteria [desc]]</codeblock> 
		<draft-comment>SEV: 12/19/11 Removed "The DISTINCT keyword is required in
		  this version of GemFire." Also made DISTINCT optional in sample above.
		</draft-comment> 
		<p>In the SELECT statement, the FROM clause data is input to the WHERE
		  clause, and the WHERE clause filters the data before passing it to the SELECT
		  projection list. The SELECT statement output is the output from the projection
		  list operations. This is similar to SQL for database access, where the FROM
		  clause specifies the data tables, the WHERE clause specifies the rows, and the
		  SELECT clause specifies the columns. 
		</p> 
		<p>These are the semantics of the 
		  <ph
			conref="../../product_short_name.xml#ditacomponent_4CDD0B39CDD54D2AAF1CBC81A1FDBA19/ph_2E41EB9BE730428A970C1C206D14DC09"><?xm-replace_text Phrase?></ph>
		  query SELECT statement: 
		<ul id="ul_0b79d1e8-0d8d-403a-a1aa-52c805ee5f68"> 
		  <li id="li_541EBCD88764419E915037C373E68A3E">The FROM clause specifies
			 the cached data to be accessed. Each expression in this clause must evaluate to
			 a collection, which is a group of distinct objects of homogeneous type. There
			 must be at least one collection specified. The collections specified in the
			 FROM clause are iterated over by the rest of the query—including the rest of
			 the FROM clause. 
		  </li> 
		  <li id="li_9163AA7C382A4214801F3AA388FA8902">The WHERE clause specifies
			 which of the elements in the FROM clause collections are to be passed on to the
			 SELECT clause—the rest are dropped. The WHERE clause specifications are called
			 "WHERE search criteria." The WHERE clause is optional. Without it, all elements
			 of the collections are added to the interim result. 
		  </li> 
		  <li id="li_D1CBD733DD70430B9909D472ED62FA3B">The projection list in the
			 SELECT clause specifies the attributes to retrieve from the result elements and
			 may also perform transformations. The SELECT clause projection list can be one
			 or more expressions, or it can be * to put all elements in the return set
			 without modification. You can optionally use the DISTINCT keyword if you want
			 to limit the results set to unique values.
		  </li> 
		</ul>In this query, the FROM clause accesses the collection of all entry
		values in the /portfolios region. The query engine passes the collection to the
		WHERE clause, which searches for entry values whose status field is 'active'.
		For each of the values found by the WHERE clause, the SELECT projection
		retrieves the value of the type attribute into the result set. 
		<codeblock>SELECT DISTINCT "type" FROM /portfolios WHERE status = 'active' </codeblock> 
		</p> 
	 </section> 
	 <section id="section_6D989D193F7944838744D5A16D79F99E"> 
		<draft-comment> 
		  <p>Can't use * for region.entrySet only in PRs. Select * from
			 region.entrySet qry NOK, index NOK (past and present) 
		  </p> 
		  <p>select e.key, e.value from region.entries OK (past - did not work on
			 index, but now it does).. BUT region.entries is deprecated. Did a search - it's
			 only listed in this one comment. 
		  </p> 
		</draft-comment> 
		<draft-comment> 
		  <p>NEED TO go through the list of options later on in this chapter and
			 bring in the full list here - so people can see it all in one place. 
		  </p> 
		  <p>Stolen off the internet - fashion for our implementation? 
		  </p>Select {Top &lt;n&gt;} {Distinct} &lt;Select variable list&gt; from
		  {allVersionsOf} {PhantomsToo} &lt;Alias variable 1&gt; in &lt;Class identifier
		  1&gt;{++ {RestrictTo &lt;ClassId&gt;}} {&lt;OuterJoins&gt;} {, &lt;Alias
		  variable 2&gt; in &lt;Class 2 identifier&gt;{++ {RestrictTo &lt;ClassId2&gt;}}
		  {&lt;OuterJoins&gt;}...} {where &lt;Criterion&gt;} {{table}order by &lt;Sort
		  variable&gt; {descending} {,&lt;Sort variable 2&gt; {descending}...}} {using
		  &lt;Cursor variable&gt;} 
		  <p>More about select statements available online.... 
		  </p> 
		</draft-comment> 
	 </section> 
  </conbody> 
</concept> 
