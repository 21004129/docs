<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="durable_event_messaging_whats_next">
	<title>Durable Client/Server Event Messaging</title>
	<conbody>
		<section id="section_72587D201589451CAC7F77A42363510D">
			<title>Initial Operation</title>
			<p>The initial startup of a durable client is similar to the startup of any other
				client, except that it specifically calls the
					<codeph>ClientCache.readyForEvents</codeph> method when all regions and
				listeners on the client are ready to process messages from the server. </p>
		</section>
		<section id="section_9B9A9EE8C7FF47948C8108A0F7F4E32E">
			<title>Disconnection</title>
			<p>While the client and servers are disconnected, their operation varies depending on
				the circumstances. <ul id="ul_F057BABA198E43959EF89CEEF241530C">
					<li id="li_C24BD71533434F02841A8C532EEE7E9B"><b>Normal disconnect</b>. When a
						client closes its connection, the servers stop sending messages to the
						client and release its connection. If the client requests it, the servers
						maintain the queues and durable interest list information until the client
						reconnects or times out. The non-durable interest lists are discarded. The
						servers continue to queue up incoming messages for entries on the durable
						interest list. All messages that were in the queue when the client
						disconnected remain in the queue. If the client requests not to have its
						subscriptions maintained, or if there are no durable subscriptions, the
						servers unregister the client and do the same cleanup as for a non-durable
						client. </li>
					<li id="li_A8D8385F9B3A417ABBDCE6EFB94462C9"><b>Abnormal disconnect</b>. If the
						client crashes or loses its connections to all servers, the servers
						automatically maintain its message queue and durable subscriptions until it
						reconnects or times out. </li>
					<li id="li_C9764122A7F140E38E8F64D895D59ADF"><b>Client disconnected but
							operational</b>. If the client operates while it is disconnected, it
						gets what data it can from the local client cache. Since updates are not
						allowed, the data can become stale. An <codeph>UnconnectedException</codeph>
						occurs if an update is attempted. </li>
					<li id="li_F4481091AFF44D919768EDBCC25BA762"><b>Client stays disconnected past
							timeout period</b>. The servers track how long to keep a durable
						subscription queue alive based on the
							<codeph>durable-client-timeout</codeph> setting. If the client remains
						disconnected longer than the timeout, the servers unregister the client and
						do the same cleanup that is performed for a non-durable client. The servers
						also log an alert. When a timed-out client reconnects, the servers treat it
						as a new client making its initial connection. </li>
				</ul>
			</p>
		</section>
		<section id="section_E3C42A6FDC884FC38ECC121955C06BDC">
			<title>Reconnection</title>
			<p>During initialization, the client cache is not blocked from doing operations, so you
				might be receiving old stored events from the server at the same time that your
				client cache is being updated by much more current events. These are the things that
				can act on the cache concurrently: <ul id="ul_543689C87D3140D4A8FE3CDFD1CE80A5">
					<li id="li_B970DE3946E94801BE3F9EF19254BDC5">Results returned by the server in
						response to the client’s interest registrations. </li>
					<li id="li_05D6ED43B2674B7D9167FE5EB5344E47">Client cache operations by the
						application. </li>
					<li id="li_8D7F1862DD4A4F6C837A129BFE9B2138">Callbacks triggered by replaying
						old events from the queue </li>
				</ul>
			</p>
			<p><keyword keyref="product_name"/> handles the conflicts between the application and
				interest registrations so they do not create cache update conflicts. But you must
				program your event handlers so they don't conflict with current operations. This is
				true for all event handlers, but it is especially important for those used in
				durable clients. Your handlers may receive events well after the fact and you must
				ensure your programming takes that into account. </p>
			<p>This figure shows the three concurrent procedures during the initialization process.
				The application begins operations immediately on the client (step 1), while the
				client’s cache ready message (also step 1) triggers a series of queue operations on
				the servers (starting with step 2 on the primary server). At the same time, the
				client registers interest (step 2 on the client) and receives a response from the
				server. Message B2 applies to an entry in Region A, so the cache listener handles
				B2’s event. Because B2 comes before the marker, the client does not apply the update
				to the cache. </p>
			<p>
				<image href="../../images/ClientServerAdvancedTopics-6.gif"
					alt="Durable client reconnection. " id="image_068A59FA019E46FA9DE0BC7FA60AAADD"
					placement="break"/>
			</p>
		</section>
		<section id="section_C848DF6D649F4DCAA2B895F5439BAA97">
			<title>Durable Event Replay </title>
			<p>When a durable client reconnects before the timeout period, the servers replay the
				events that were stored while the client was gone and then resume normal event
				messaging to the client. To avoid overwriting current entries with old data, the
				stored events are not applied to the client cache. Stored events are distinguished
				from new normal events by a marker that is sent to the client once all old events
				are replayed. <ol id="ol_5AB7763AA8454CBE8CE6F92107C55524">
					<li id="li_62290041A988427581155969A5333610">All servers with a queue for this
						client place a marker in their queue when the client reconnects. </li>
					<li id="li_4D90AB38EF504B9B9D3554BBCF95F2D0">The primary server sends the queued
						messages to the client up to the marker. </li>
					<li id="li_52905A28E0F340DCA2939B354964A925">The client receives the messages
						but does not apply the usual automatic updates to its cache. If cache
						listeners are installed, they handle the events. </li>
					<li id="li_2B4A313A8DF343C4BD01A36B74864A07">The client receives the marker
						message indicating that all past events have been played back. </li>
					<li id="li_3AC4007651D945F38055C815F02B5254">The server sends the current list
						of live regions. </li>
					<li id="li_2FF542CFBDE040C9860BD2114E907DD7">For every
							<codeph>CacheListener</codeph> in each live region on the client, the
						marker event triggers the <codeph>afterRegionLive</codeph> callback. After
						the callback, the client begins normal processing of events from the server
						and applies the updates to its cache. </li>
				</ol>
			</p>
			<p>Even when a new client starts up for the first time, the client cache ready markers
				are inserted in the queues. If messages start coming into the new queues before the
				servers insert the marker, those messages are considered as having happened while
				the client was disconnected, and their events are replayed the same as in the
				reconnect case. </p>
		</section>
		<section id="section_E519D541E2844292ABD2E0BDF5FB5798">
			<title>Application Operations During Interest Registration </title>
			<p>Application operations take precedence over interest registration responses. The
				client can perform operations while it is receiving its interest registration
				responses. When adding register interest responses to the client cache, the
				following rules are applied: <ul id="ul_F07A8DC8746F4A19B3BF8CA30B0770C7">
					<li id="li_7E2A957E7CC64BE188C2B59F9CF859D8">If the entry already exists in the
						cache with a valid value, it is not updated. </li>
					<li id="li_B8B5818EF6BC4EE6B3D1BBBE33B62F16">If the entry is invalid, and the
						register interest response is valid, the valid value is put into the cache. </li>
					<li id="li_9591C39D57A94907B043B1042C63D51D">If an entry is marked destroyed, it
						is not updated. Destroyed entries are removed from the system after the
						register interest response is completed. </li>
					<li id="li_690CD196792144C6B1F887E994A2C314">If the interest response does not
						contain any results, because all of those keys are absent from the server’s
						cache, the client’s cache can start out empty. If the queue contains old
						messages related to those keys, the events are still replayed in the
						client’s cache. </li>
				</ul>
			</p>
		</section>
	</conbody>
</concept>
