<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="method_invocation"> 
  <title>Method Invocation</title> 
  <prolog audience="basic"> 
  </prolog> 
  <conbody> 
	 <section id="section_492047CEC5A74E6D88FE100068FD6B81"> 
		<p>To use a method in a query, use the attribute name that maps to the
		  public method you want to invoke. 
		</p> 
		<p id="query_attribute_resolution">The query engine maps the attribute 
		  <codeph>x</codeph> to a Java class member in this order until a match
		  is found or the options are exhausted: 
		<ol id="ol_6CF4DFD8766E4C73B357EB06F9B5FB89"> 
		  <li id="li_7490418B92884CD08E5B41D733BE9BE3"> 
			 <codeph>public method getX()</codeph> 
		  </li> 
		  <li id="li_DF8EECE8D3FD4D5399603392A0175A43"> 
			 <codeph>public method x()</codeph> 
		  </li> 
		  <li id="li_5724FC6139124251B2EA4F6E93E59570"> 
			 <codeph>public field x</codeph> 
		  </li> 
		</ol>
		</p> 
		<p>Examples:
		  <codeblock>/Employees.name -- maps to /Employees.getName()

SELECT DISTINCT * FROM /portfolios 
    WHERE positions.size &gt;= 2 -- maps to positions.size()</codeblock>
		</p> 
		<p>Methods declared to return 
		  <codeph>void</codeph> evaluate to 
		  <codeph>null</codeph> when invoked through the query processor. 
		</p> 
	 </section> 
	 <section id="section_53F6A2AF960045D79540EAA17069D19D"> 
		<title>Invoking Methods Without Parameters</title> 
		<p>If you the attribute name maps to a public method that takes no
		  parameters, just include the method name in the query string as an attribute.
		  For example, 
		  <codeph>emps.isEmpty</codeph> is equivalent to 
		  <codeph>emps.isEmpty()</codeph>. Here the query invokes 
		  <codeph>isEmpty</codeph> on positions, and returns the set of all
		  portfolios with no positions:
		  <codeblock>SELECT DISTINCT * FROM /portfolios WHERE positions.isEmpty</codeblock>
		</p> 
	 </section> 
	 <section id="section_A0F1412E7B074D8CAD2199E4C22CD02A"> 
		<title>Invoking Methods with Parameters</title> 
		<p>To invoke methods with parameters, include the method name in the
		  query string as an attribute and provide the method arguments between
		  parentheses. This example passes the argument 
		  <codeph>Bo</codeph> to the public method:
		  <codeblock>SELECT DISTINCT * FROM /Employees WHERE name.startsWith(‘Bo’)</codeblock>
		</p> 
		<p>For overloaded methods, the query processor decides which method to
		  call by matching the runtime argument types with the parameter types required
		  by the method. If only one method’s signature matches the parameters provided,
		  it is invoked. The query processor uses runtime types to match method
		  signatures.
		</p> 
		<p>If more than one method can be invoked, the query processor chooses
		  the method whose parameter types are the most specific for the given arguments.
		  For example, if an overloaded method includes versions with the same number of
		  arguments, but one takes a 
		  <codeph>Person</codeph> type as an argument and the other takes an 
		  <codeph>Employee</codeph> type, derived from 
		  <codeph>Person</codeph>, 
		  <codeph>Employee</codeph> is the more specific object type. If the
		  argument passed to the method is compatible with both types, the query
		  processor uses the method with the 
		  <codeph>Employee</codeph> parameter type. 
		</p> 
		<p>The query processor uses the runtime types of the parameters and the
		  receiver to determine the proper method to invoke. Because runtime types are
		  used, an argument with a null value has no typing information, and so can be
		  matched with any object type parameter. When a null argument is used, if the
		  query processor cannot determine the proper method to invoke based on the
		  non-null arguments, it throws an 
		  <codeph>AmbiguousNameException</codeph> .
		</p> 
	 </section> 
  </conbody> 
</concept> 
