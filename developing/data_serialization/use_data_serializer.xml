<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="use_data_serializer"> 
  <title>Serialize Using DataSerializer</title> 
  <shortdesc>Use 
	 <codeph>DataSerializer</codeph> to serialize and deserialize your domain
	 object without modifying your domain object source. You can use this if you do
	 not want to change your domain object or for objects for which you do not have
	 the source.
  </shortdesc> 
  <prolog audience="basic"> 
  </prolog> 
  <conbody> 
	 <section id="section_0C84D6BF5E9748CB865E6BB944A077DE"> 
		<draft-comment> 
		  <p>This is a mess - needs a task list for how to use this. Split
			 concept and task.
		  </p> 
		</draft-comment> 
		<p>GemFire's 
		  <codeph>com.gemstone.gemfire.DataSerializable</codeph> interface gives
		  you faster and more compact data serialization than the standard Java
		  serialization. You can further speed serialization by registering the
		  instantiator for your 
		  <codeph>DataSerializable</codeph> class through 
		  <codeph>com.gemstone.gemfire.Instantiator</codeph>, eliminating the
		  need for reflection to find the right serializer. The 
		  <codeph>DataSerializable</codeph> interface is not supported with
		  circular object graphs. You can provide your own serialization through the API
		  or in the 
		  <codeph>cache.xml</codeph> through the 
		  <codeph>serialization-registration</codeph> element. For more
		  information, see the online Java documentation for 
		  <codeph>com.gemstone.gemfire.DataSerializable</codeph> and 
		  <codeph>com.gemstone.gemfire.DataSerializer</codeph>. 
		  <note>GemFire 
			 <codeph>DataSerializable</codeph> extends 
			 <codeph>java.io.Serializable</codeph>. In your objects where you
			 implement 
			 <codeph>DataSerializable</codeph>, you need to follow all the
			 standard Java rules to instanced of 
			 <codeph>Serializable</codeph>. 
		  </note>
		</p> 
		<p>This example registers the byteholder class instantiator with the data
		  serialization framework:
		</p> 
		<codeblock>Instantiator.register(new Instantiator(byteholder.class, 17) {
	public DataSerializable newInstance() {
		return new byteholder();
	}
});</codeblock> 
		<p> In addition to speeding standard object serialization, you can use
		  this interface to serialize any custom objects you store in the cache. 
		</p> 
	 </section> 
  </conbody> 
</concept> 
