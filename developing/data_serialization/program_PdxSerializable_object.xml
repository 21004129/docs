<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="use_pdx_serializable"> 
  <title>Program Your Domain Objects to Use PdxSerializable</title> 
  <shortdesc id="shortdesc_8B8AE61FFD414F89B154553F2B9F6774">Implement 
	 <codeph>PdxSerializable</codeph> in your domain objects. 
  </shortdesc> 
  <prolog audience="basic"> 
  </prolog> 
  <conbody> 
	 <section id="section_7F357A8E56B54BFB9A5778C0F89E034E"> 
		<p> Follow these steps to program your domain object for PDX
		  serialization using the 
		  <codeph>PdxSerializable</codeph> interface. 
		  <draft-comment>NEED BETTER EXAMPLE - one that shows simple nested. See
			 test example - looks like the outside domain class has to declare the nested
			 domain class as a PdxSerializable. Add a final step - for this - or add a field
			 definition modification as a step - 2.5? 
		  </draft-comment> 
		<ol id="ol_b6d69a56-78de-4f9e-88de-5d8c6b1b0ddd"> 
		  <li id="li_40290E41A9C24F1692ECF60269ECA426">In your domain class,
			 implement 
			 <codeph>com.gemstone.gemfire.PdxSerializable</codeph>, importing the
			 required 
			 <codeph>com.gemstone.gemfire.pdx</codeph> classes. Import 
			 <codeph>java.io.IOException</codeph> if you don't already have that.
			 Example: 
			 <codeblock>import java.io.IOException;

import com.gemstone.gemfire.pdx.PdxReader;
import com.gemstone.gemfire.pdx.PdxSerializable;
import com.gemstone.gemfire.pdx.PdxWriter;

public class Person implements PdxSerializable {
  ...</codeblock> 
		  </li> 
		  <li id="li_1380F87B4A874C139935168D911BD28F">If your domain class does
			 not have a zero-arg constructor, create one for it. Example: 
			 <draft-comment>Is this too much or useful? 
			 </draft-comment> 
			 <codeblock>public Person(){
}</codeblock> 
		  </li> 
		  <li id="li_DE4C113670904EF0959410240C020940">Program 
			 <codeph>PdxSerializable.toData</codeph>: 
			 <ol id="ol_E022809209F34C65A029DA2538A06CFE"> 
				<li id="li_1E458430F89B42D29F0D4EB6781458E4">Write each of your
				  domain class's standard Java data fields using the 
				  <codeph>PdxWriter</codeph> write methods. 
				  <ph
					conref="../../product_short_name.xml#ditacomponent_4CDD0B39CDD54D2AAF1CBC81A1FDBA19/ph_2E41EB9BE730428A970C1C206D14DC09"><?xm-replace_text Phrase?></ph>
				  automatically provides 
				  <codeph>PdxWriter</codeph> to the 
				  <codeph>toData</codeph> method for 
				  <codeph>PdxSerializable</codeph> objects. 
				</li> 
				<li id="li_DE6BCF3B23CC45D5B9E35A437EF63FDD">Call the 
				  <codeph>toData</codeph> 
				  <codeph>markIdentifyField</codeph> method for each field 
				  <ph
					conref="../../product_short_name.xml#ditacomponent_4CDD0B39CDD54D2AAF1CBC81A1FDBA19/ph_2E41EB9BE730428A970C1C206D14DC09"><?xm-replace_text Phrase?></ph>
				  should use to identify your object. This is used to compare objects for
				  operations like DISTINCT queries. 
				</li> 
			 </ol>Example: 
			 <codeblock>// Person fields
  private int id;
  private String name;
  private String[] address;
  private String city;
  private String state;
  private String zip;
  private int age;

  ...

  public void toData(PdxWriter writer) throws IOException {
    writer.writeInt("id", id);
    writer.writeString("name", name);
    writer.writeStringArray("address", address);
    writer.writeString("city", city);
    writer.writeString("state", state);
    writer.writeString("zip", zip);
    writer.writeInt("age", age);

// The markIdentifyField calls must come after the 
// fields' write methods
    writer.markIdentityField("id"); 
  }</codeblock> 
		  </li> 
		  <li id="li_A31789487D1D481F87A1626BD4893CE2">Program 
			 <codeph>PdxSerializable.fromData</codeph> to read your data fields
			 from the serialized form into the object's fields using the 
			 <codeph>PdxReader</codeph> read methods. 
			 <ph
			  conref="../../product_short_name.xml#ditacomponent_4CDD0B39CDD54D2AAF1CBC81A1FDBA19/ph_2E41EB9BE730428A970C1C206D14DC09"><?xm-replace_text Phrase?></ph>
			 automatically provides 
			 <codeph>PdxReader</codeph> to the 
			 <codeph>fromData</codeph> method for 
			 <codeph>PdxSerializable</codeph> objects. 
			 <note>Use the same names as you did in 
				<codeph>toData</codeph> and call the read operations in the same
				order as you called the write operations in your 
				<codeph>toData</codeph> implementation. 
			 </note>Example: 
			 <codeblock>  public void fromData(PdxReader reader) throws IOException {
    id = reader.readInt("id");
    name = reader.readString("name");
    address = reader.readStringArray("address");
    city = reader.readString("city");
    state = reader.readString("state");
    zip = reader.readString("zip");
    age = reader.readInt("age");
  }</codeblock> 
			 <draft-comment> ?? Is that enough for querying to work with single
				field deserialization? 
			 </draft-comment> 
		  </li> 
		  <li id="li_2AC6544FEA674CB2B70B8340ED8FD92C">Optional. Program your
			 domain object's equals and hashcode methods. 
		  </li> 
		</ol> 
		</p> 
	 </section> 
  </conbody> 
</concept> 
