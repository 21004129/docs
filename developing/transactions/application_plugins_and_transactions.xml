<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="application_plugins_and_transactions"> 
  <title>Application Plug-Ins and Transactions</title>
  <prolog><metadata><keywords><keyword>gemfire transaction
			 plug-ins</keyword><keyword>gemfire TransactionWriter</keyword><keyword>gemfire
			 TransactionListener</keyword></keywords></metadata>
  </prolog> 
  <conbody> 
	 <section id="section_7EAA2EBD2CCB445A9A57AF73BB0D4EF1"> 
		<p>All standard vFabric GemFire
		  application plug-ins work with transactions. In addition, The transaction
		  interface offers specialized plug-ins that support transactional operation. 
		</p> 
		<note> 
		  <p>No direct interaction exists between client transactions and client
			 application plug-ins. When a client runs a transaction, GemFire calls the
			 plug-ins that are installed on the transaction's server delegate and its server
			 host. Client application plug-ins are not called for operations inside the
			 transaction or for the transaction as a whole. When the transaction is
			 committed, the changes to the server cache are sent to the client cache
			 according to client interest registration. These events can result in calls to
			 the client's 
			 <codeph>CacheListener</codeph>s, as with any other events received
			 from the server. 
			 <draft-comment>VERIFY this note about clients 
			 </draft-comment> 
		  </p> 
		</note> 
		<title>Cache Plug-Ins</title> 
		<p>The 
		  <codeph>EntryEvent</codeph> that the callbacks receive has a unique GemFire
		  transaction ID, so the cache listener can associate each event, as it occurs,
		  with a particular transaction. 
		  <codeph>EntryEvent</codeph>s that are not part of a transaction return
		  null instead of a transaction ID. 
		<ul id="ul_13E121CD255D4C7692787F5DCAF075A5"> 
		  <li
			id="li_46F1FD8534274841B0EDEE90C83E8D45"><codeph>CacheLoader</codeph>. When a
			 cache loader is called by a transaction operation, values loaded by the cache
			 loader may cause a write conflict when the transaction commits. 
		  </li> 
		  <li
			id="li_3FAD0B7CB54F4133AE01E0ABFC26B173"><codeph>CacheWriter</codeph>. During a
			 transaction, if a cache writer exists, its methods are invoked as usual for all
			 operations, as the operations are called in the transactions. The 
			 <codeph>netWrite</codeph> operation is not used. The only cache
			 writer used is the one in the member where the transactional data resides. 
		  </li> 
		  <li
			id="li_8B057E2FA8174DAFADFE9DB32BA00E2F"><codeph>CacheListener</codeph>. The
			 cache listener callbacks - local and remote - are triggered after the
			 transaction commits. The system sends the conflated transaction events, in the
			 order they were stored. 
		  </li> 
		</ul> 
		</p> 
	 </section> 
	 <section id="section_5C900EF3D0944B0BAF98157C2295D059"> 
		<title>Transaction Plug-Ins</title> 
		<p>GemFire has the following transaction plug-ins: 
		<ul id="ul_DA49B66969364984AD983AEA2CCD3940"> 
		  <li
			id="li_F8195BBE59B04E9E8E9E6C69026E41F0"><codeph>TransactionWriter</codeph>.
			 When you commit a transaction, if a transaction writer is installed in the
			 cache where the data updates were performed, it is called. The writer can do
			 whatever work you need, including aborting the transaction. 
		  </li> 
		  <li
			id="li_244F9D02DBA544B987BE91175C38C049"><codeph>TransactionListener</codeph>.
			 When the transaction ends, its thread calls the transaction listener to perform
			 the appropriate follow-up for successful commits, failed commits, or voluntary
			 rollbacks. The transaction that caused the listener to be called no longer
			 exists by the time the listener code executes. 
			 <p>Transaction listeners have access to the transactional view and
				thus are not affected by non-transactional update operations. 
				<codeph>TransactionListener</codeph> methods cannot make
				transactional changes or cause a rollback. They can, however, start a new
				transaction. Multiple transactions on the same cache can cause concurrent
				invocation of 
				<codeph>TransactionListener</codeph> methods, so implement methods
				that do the appropriate synchronizing of the multiple threads for thread-safe
				operation. 
			 </p> 
			 <p>A transaction listener can preserve the result of a transaction,
				perhaps to compare with other transactions, or for reference in case of a
				failed commit. When a commit fails and the transaction ends, the application
				cannot just retry the transaction, but must build up the data again. For most
				applications, the most efficient action is just to start a new transaction and
				go back through the application logic again. 
			 </p> 
			 <p>The rollback and failed commit operations are local to the member
				where the transactional operations are run. When a successful commit writes to
				a distributed or partitioned region, however, the transaction results are
				distributed to other members the same as other updates. The transaction
				listener on the receiving members reflect the changes the transaction makes in
				that member, not the originating member. Any exceptions thrown by the
				transaction listener are caught by GemFire
				and logged. 
			 </p> 
		  </li> 
		</ul> 
		</p> 
	 </section> 
  </conbody> 
</concept> 
