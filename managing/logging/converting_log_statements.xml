<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic
  id="topic_r2s_m42_jq">
  <title>Converting Existing Log Statements to Log4j 2</title>
  <shortdesc>This topic describes how to convert LogWriter statements to new Log4j 2 Logger
    statements. </shortdesc>
  <body>
    <p>First, add this line near the top of the class and resolve its imports:</p>
    <p><codeblock>private static final Logger logger = LogService.getLogger();</codeblock><draft-comment
        author="stymon">include the following sentence or rephrase?</draft-comment>Logger is static
      because GemFire creates too many instances of some classes and one consistent approach was
      better than having logger be static and non-static for different classes.</p>
    <p>
      <b>A FINE log statement conversion example</b>
    </p>
    <p>The following is an example of converting a FINE log statement with concatenated var to
      Logger:
      <codeblock>if (logWriter.fineEnabled()){
 logWriter.fine("This is a log statement with var=" + var);
}</codeblock>converts
      to:<codeblock>if (logger.isDebugEnabled()) {
 logger.debug("This is a log statement with var={}", var);
 } </codeblock>
    </p>
    <p><b>A LocalizedStrings example</b>
      <codeblock>getGemFireCache().getLoggerI18n().info(LocalizedStrings.Region_RemoveAll_Applied_PartialKeys_0_1, new Object[] {getFullPath(), partialKeys});</codeblock>converts
      to:<codeblock>logger.info(LocalizedMessage.create(LocalizedStrings.Region_RemoveAll_Applied_PartialKeys_0_1, new Object[] {getFullPath(), partialKeys})); </codeblock></p>
    <p><b>A DEBUG boolean example</b>
      <codeblock>if (DEBUG) {
 logWriter.info("This is a log statement"); 
}</codeblock>converts
      to:<codeblock>if (logger.isTraceEnabled()) {
 logger.trace("This is a log statement"); 
}</codeblock></p>
    <p>The DEBUG log level was removed because all boolean flags for controlling logging need to be
      removed in order to give Log4J2 full control. This log statement can now be enabled by setting
      logger of just this class to TRACE level. TRACE was used in order to keep consistent logging
      output between "fine" level and the new "debug" level. </p>
    <p>Note: if the DEBUG boolean enables logging for more than one class, then consider converting
      it to a LogMarker (see com.gemstone.gemfire.internal.logging.log4j.LogMarker.java) We chose to
      optimize for INFO level logging. Do not use isXxxxEnabled for log levels over "debug" because
      these isXxxxEnabled checks involve more than hitting a volatile boolean. An optimization was
      added to avoid this overhead for isTraceEnabled and isDebugEnabled when the log level is INFO
      or above</p>
  </body>
</topic>
