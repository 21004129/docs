<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="resource_manager_example_configurations">
	<title>Resource Manager Example Configurations</title>
	<shortdesc>These examples set the critical threshold to 85 percent of the tenured heap and the
		eviction threshold to 75 percent. </shortdesc>
	<conbody>
		<section id="section_B50C552B114D47F3A63FC906EB282024">
			<p>The region <codeph>bigDataStore</codeph> is configured to participate in the resource
				manager's eviction activities. <ul id="ul_3AB02B56AA364E25867FC3A9446F5CC9">
					<li>gfsh
						Example:<codeblock>gfsh&gt;start server --name=server1 --initial-heap=30MB --max-heap=30MB \
--critical-heap-percentage=85 --eviction-heap-percentage=75</codeblock><codeblock>gfsh>create region --name=bigDataStore --type=PARTITION_HEAP_LRU</codeblock></li>
					<li id="li_735E11D9356D4A9EB7FC8435387FA9A2">XML: <codeblock>&lt;cache&gt;
   &lt;region name="bigDataStore" refid="PARTITION_HEAP_LRU"/&gt;
    ...	
   &lt;resource-manager critical-heap-percentage="85" eviction-heap-percentage="75"/&gt;
&lt;/cache&gt;</codeblock>
						<note>The <codeph>resource-manager</codeph> specification must appear after
							the region declarations in your cache.xml file.</note></li>
					<li id="li_5E6AA34E0E5640ECBD3E04EB0150FA0A">Java:
						<codeblock>Cache cache = CacheFactory.create();

ResourceManager rm = cache.getResourceManager();
rm.setCriticalHeapPercentage(85);
rm.setEvictionHeapPercentage(75);

RegionFactory rf = 
	cache.createRegionFactory(RegionShortcut.PARTITION_HEAP_LRU);
Region region = rf.create("bigDataStore");</codeblock>
					</li>
				</ul>
			</p>
		</section>
		<section id="section_95497FDF114A4DC8AC5D899E05E324E5">
			<title>Use Case for the Example Code</title>
			<p>This is one possible scenario for the configuration used in the examples: <ul
					id="ul_F89443DA5BAC4CCC9F229D24CB27D6E6">
					<li id="li_D17D2124300F499FBA92ACA65E72BFFE">A 64-bit Sun Java VM 1.6 JVM, with
						8 Gb of heap space on an 4 CPU system running Linux. </li>
					<li id="li_AF7898AA2C904AF499FC3BFE953AC8CF">The data region bigDataStore has
						approximately 2-3 million small values with average entry size of 512 bytes.
						So approximately 4-6 Gb of the heap is for region storage. </li>
					<li id="li_7C1C7D9577CB4CEABF93F897498AF4FF">The member hosting the region also
						runs an application that may take up to 1 Gb of the heap. </li>
					<li id="li_884C094BAD424735B09B534933BF3A0C">The application must never run out
						of heap space and has been crafted such that data loss in the region is
						acceptable if the heap space becomes limited due to application issues, so
						the default <codeph>lru-heap-percentage</codeph> action destroy is suitable. </li>
					<li id="li_44F36741108B4B6F8CB3AA1E2B491A8A">The application's service guarantee
						makes it very intolerant of <codeph>OutOfMemoryException</codeph>s. Testing
						has shown that leaving 15% head room above the critical threshold when
						adding data to the region gives 99.5% uptime with no
							<codeph>OutOfMemoryException</codeph>s, when configured with the CMS
						garbage collector using
							<codeph>-XX:CMSInitiatingOccupancyFraction=70</codeph>. </li>
				</ul>
			</p>
		</section>
	</conbody>
</concept>
